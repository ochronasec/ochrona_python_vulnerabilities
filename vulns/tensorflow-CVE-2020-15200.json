{"name": "tensorflow", "cve_id": "CVE-2020-15200", "publish_date": "2020-09-25T19:15Z", "cwe_id": "CWE-20", "owner": "Google Inc.", "affected_versions": [{"version_value": "2.3.1", "operator": "<"}], "references": ["https://github.com/advisories/GHSA-x7rp-74x2-mjf3", "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x7rp-74x2-mjf3", "https://nvd.nist.gov/vuln/detail/CVE-2020-15200", "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1", "https://github.com/tensorflow/tensorflow/commit/3cbb917b4714766030b28eba9fb41bb97ce9ee02"], "description": "From NVD:\nIn Tensorflow before version 2.3.1, the `RaggedCountSparseOutput` implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the `splits` tensor generate a valid partitioning of the `values` tensor. Thus, the code sets up conditions to cause a heap buffer overflow. A `BatchedMap` is equivalent to a vector where each element is a hashmap. However, if the first element of `splits_values` is not 0, `batch_idx` will never be 1, hence there will be no hashmap at index 0 in `per_batch_counts`. Trying to access that in the user code results in a segmentation fault. The issue is patched in commit 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and is released in TensorFlow version 2.3.1.\nFrom Github:\n### Impact\nThe `RaggedCountSparseOutput` implementation does not validate that the input arguments form a valid ragged tensor. In particular, there is no validation that the values in the `splits` tensor generate a valid partitioning of the `values` tensor. Thus, the [following code](https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/core/kernels/count_ops.cc#L248-L265\n) sets up conditions to cause a heap buffer overflow:\n```cc\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n    int batch_idx = 0;\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits_values(batch_idx)) {\n        batch_idx++;\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        per_batch_counts[batch_idx - 1][value] = 1;\n      }\n    }\n```\n\nA `BatchedMap` is equivalent to a vector where each element is a hashmap. However, if the first element of `splits_values` is not 0, `batch_idx` will never be 1, hence there will be no hashmap at index 0 in `per_batch_counts`. Trying to access that in the user code results in a segmentation fault.\n\n### Patches\nWe have patched the issue in 3cbb917b4714766030b28eba9fb41bb97ce9ee02 and will release a patch release.\n\nWe recommend users to upgrade to TensorFlow 2.3.1.\n\n### For more information\nPlease consult [our security guide](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for more information regarding the security model and how to contact us with issues and questions.\n\n### Attribution\nThis vulnerability is a variant of [GHSA-p5f8-gfw5-33w4](https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p5f8-gfw5-33w4)", "latest_version": "2.3.1", "language": "python", "license": "Apache-2.0", "repository_summary": "TensorFlow is an open source machine learning framework for everyone.", "repo_url": "https://github.com/tensorflow/tensorflow", "impact": {"cvss2_score": 4.3, "cvss2_severity": "MEDIUM", "vector_string": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "av": "NETWORK", "ac": "HIGH", "pr": "NONE", "c": "NONE", "i": "NONE", "a": "HIGH", "impact_score": 3.6, "exploitability_score": 2.2, "cvss3_score": 5.9, "cvss3_severity": "MEDIUM", "ui": "NONE", "s": "UNCHANGED"}, "ochrona_severity_score": 5.9}