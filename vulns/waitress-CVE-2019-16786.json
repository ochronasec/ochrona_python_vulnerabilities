{"name": "waitress", "cve_id": "CVE-2019-16786", "publish_date": "2019-12-20T23:15Z", "cwe_id": "CWE-444", "owner": "Zope Foundation and Contributors", "affected_versions": [{"version_value": "1.3.1", "operator": "<="}], "references": ["https://access.redhat.com/errata/RHSA-2020:0720", "https://github.com/Pylons/waitress/commit/f11093a6b3240fc26830b6111e826128af7771c3", "https://github.com/Pylons/waitress/security/advisories/GHSA-g2xc-35jw-c63p", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYEOTGWJZVKPRXX2HBNVIYWCX73QYPM5/", "https://github.com/advisories/GHSA-g2xc-35jw-c63p", "https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GVDHR2DNKCNQ7YQXISJ45NT4IQDX3LJ7/", "https://nvd.nist.gov/vuln/detail/CVE-2019-16786"], "description": "From NVD:\nWaitress through version 1.3.1 would parse the Transfer-Encoding header and only look for a single string value, if that value was not chunked it would fall through and use the Content-Length header instead. According to the HTTP standard Transfer-Encoding should be a comma separated list, with the inner-most encoding first, followed by any further transfer codings, ending with chunked. Requests sent with: \"Transfer-Encoding: gzip, chunked\" would incorrectly get ignored, and the request would use a Content-Length header instead to determine the body size of the HTTP message. This could allow for Waitress to treat a single request as multiple requests in the case of HTTP pipelining. This issue is fixed in Waitress 1.4.0.\nFrom Github:\n### Impact\n\nWaitress would parse the `Transfer-Encoding` header and only look for a single string value, if that value was not `chunked` it would fall through and use the `Content-Length` header instead.\n\nAccording to the HTTP standard `Transfer-Encoding` should be a comma separated list, with the inner-most encoding first, followed by any further transfer codings, ending with `chunked`.\n\nRequests sent with:\n\n```\nTransfer-Encoding: gzip, chunked\n```\n\nWould incorrectly get ignored, and the request would use a `Content-Length` header instead to determine the body size of the HTTP message.\n\nThis could allow for Waitress to treat a single request as multiple requests in the case of HTTP pipelining.\n\n### Patches\n\nThis issue is fixed in Waitress 1.4.0. This brings a range of changes to harden Waitress against potential HTTP request confusions, and may change the behaviour of Waitress behind non-conformist proxies. \n\nWaitress will now return a 501 Not Implemented error if the `Transfer-Encoding` is not `chunked` or contains multiple elements. Waitress does not support any transfer codings such as `gzip` or `deflate`.\n\nThe Pylons Project recommends upgrading as soon as possible, while validating that the changes in Waitress don&#39;t cause any changes in behavior.\n\n### Workarounds\n\nVarious reverse proxies may have protections against sending potentially bad HTTP requests to the backend, and or hardening against potential issues like this. If the reverse proxy doesn&#39;t use HTTP/1.1 for connecting to the backend issues are also somewhat mitigated, as HTTP pipelining does not exist in HTTP/1.0 and Waitress will close the connection after every single request (unless the Keep Alive header is explicitly sent... so this is not a fool proof security method).\n\n### Issues/more security issues:\n\n* open an issue at https://github.com/Pylons/waitress/issues (if not sensitive or security related)\n* email the Pylons Security mailing list: pylons-project-security@googlegroups.com (if security related)", "latest_version": "1.4.4", "language": "python", "license": "ZPL-2.1", "repository_summary": "Waitress WSGI server", "repo_url": "https://github.com/Pylons/waitress", "impact": {"cvss2_score": 5.0, "cvss2_severity": "MEDIUM", "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "av": "NETWORK", "ac": "LOW", "pr": "NONE", "c": "NONE", "i": "HIGH", "a": "NONE", "impact_score": 3.6, "exploitability_score": 3.9, "cvss3_score": 7.5, "cvss3_severity": "HIGH", "ui": "NONE", "s": "UNCHANGED"}, "ochrona_severity_score": 7.5}