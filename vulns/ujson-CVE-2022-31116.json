{
    "name": "ujson",
    "cve_id": "CVE-2022-31116",
    "publish_date": "2022-07-05T18:15Z",
    "cwe_id": "CWE-670",
    "owner": "Jonas Tarnstrom",
    "affected_versions": [
        {
            "version_value": "5.4.0",
            "operator": "<"
        }
    ],
    "references": [
        "https://github.com/advisories/GHSA-wpqr-jcpx-745r",
        "https://nvd.nist.gov/vuln/detail/CVE-2022-31116",
        "https://github.com/ultrajson/ultrajson/security/advisories/GHSA-wpqr-jcpx-745r",
        "https://github.com/ultrajson/ultrajson/commit/67ec07183342589d602e0fcf7bb1ff3e19272687"
    ],
    "description": "From NVD:\nUltraJSON is a fast JSON encoder and decoder written in pure C with bindings for Python 3.7+. Affected versions were found to improperly decode certain characters. JSON strings that contain escaped surrogate characters not part of a proper surrogate pair were decoded incorrectly. Besides corrupting strings, this allowed for potential key confusion and value overwriting in dictionaries. All users parsing JSON from untrusted sources are vulnerable. From version 5.4.0, UltraJSON decodes lone surrogates in the same way as the standard library's `json` module does, preserving them in the parsed output. Users are advised to upgrade. There are no known workarounds for this issue.\nFrom Github:\n### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nAnyone parsing JSON from an untrusted source is vulnerable.\n\nJSON strings that contain escaped surrogate characters not part of a proper surrogate pair were decoded incorrectly. Besides corrupting strings, this allowed for potential key confusion and value overwriting in dictionaries.\n\nExamples:\n\n```python\n# An unpaired high surrogate character is ignored.\n>>> ujson.loads(r'\"\\uD800\"')\n''\n>>> ujson.loads(r'\"\\uD800hello\"')\n'hello'\n\n# An unpaired low surrogate character is preserved.\n>>> ujson.loads(r'\"\\uDC00\"')\n'\\udc00'\n\n# A pair of surrogates with additional non surrogate characters pair up in spite of being invalid.\n>>> ujson.loads(r'\"\\uD800foo bar\\uDC00\"')\n'foo bar\ud800\udc00'\n```\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n\nUsers should upgrade to UltraJSON 5.4.0.\n\nFrom version 5.4.0, UltraJSON decodes lone surrogates in the same way as the standard library's `json` module does, preserving them in the parsed output:\n\n```python3\n>>> ujson.loads(r'\"\\uD800\"')\n'\\ud800'\n>>> ujson.loads(r'\"\\uD800hello\"')\n'\\ud800hello'\n>>> ujson.loads(r'\"\\uDC00\"')\n'\\udc00'\n>>> ujson.loads(r'\"\\uD800foo bar\\uDC00\"')\n'\\ud800foo bar\\udc00'\n```\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nShort of switching to an entirely different JSON library, there are no safe alternatives to upgrading.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [UltraJSON](http://github.com/ultrajson/ultrajson/issues)\n",
    "latest_version": "5.4.0",
    "language": "python",
    "license": "BSD-3-Clause",
    "repository_summary": "Ultra fast JSON decoder and encoder written in C with Python bindings",
    "repo_url": "https://github.com/ultrajson/ultrajson",
    "impact": {
        "cvss2_score": 5.0,
        "cvss2_severity": "MEDIUM",
        "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "av": "NETWORK",
        "ac": "LOW",
        "pr": "NONE",
        "c": "NONE",
        "i": "NONE",
        "a": "HIGH",
        "impact_score": 3.6,
        "exploitability_score": 3.9,
        "cvss3_score": 7.5,
        "cvss3_severity": "HIGH",
        "ui": "NONE",
        "s": "UNCHANGED"
    },
    "ochrona_severity_score": 7.5
}