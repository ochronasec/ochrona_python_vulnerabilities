{"name": "tlslite-ng", "cve_id": "CVE-2020-26263", "publish_date": "2020-12-21T17:15Z", "cwe_id": "CWE-326", "owner": "Hubert Kario", "affected_versions": [{"version_value": "0.7.6", "operator": "<"}], "references": ["https://github.com/tlsfuzzer/tlslite-ng/pull/438", "https://github.com/tlsfuzzer/tlslite-ng/pull/439", "https://github.com/tlsfuzzer/tlslite-ng/security/advisories/GHSA-wvcv-832q-fjg7", "https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/", "https://nvd.nist.gov/vuln/detail/CVE-2020-26263", "https://github.com/tlsfuzzer/tlslite-ng/commit/c28d6d387bba59d8bd5cb3ba15edc42edf54b368", "https://pypi.org/project/tlslite-ng/", "https://github.com/advisories/GHSA-wvcv-832q-fjg7"], "description": "From NVD:\ntlslite-ng is an open source python library that implements SSL and TLS cryptographic protocols. In tlslite-ng before versions 0.7.6 and 0.8.0-alpha39, the code that performs decryption and padding check in RSA PKCS#1 v1.5 decryption is data dependant. In particular, the code has multiple ways in which it leaks information about the decrypted ciphertext. It aborts as soon as the plaintext doesn't start with 0x00, 0x02. All TLS servers that enable RSA key exchange as well as applications that use the RSA decryption API directly are vulnerable. This is patched in versions 0.7.6 and 0.8.0-alpha39. Note: the patches depend on Python processing the individual bytes in side-channel free manner, this is known to not the case (see reference). As such, users that require side-channel resistance are recommended to use different TLS implementations, as stated in the security policy of tlslite-ng.\nFrom Github:\n### Impact\r\nThe code that performs decryption and padding check in RSA PKCS#1 v1.5 decryption is data dependant.\r\nIn particular, code in current (as of 0.8.0-alpha38) master\r\nhttps://github.com/tlsfuzzer/tlslite-ng/blob/0812ed60860fa61a6573b2c0e18771414958f46d/tlslite/utils/rsakey.py#L407-L441\r\nand code in 0.7.5 branch\r\nhttps://github.com/tlsfuzzer/tlslite-ng/blob/acdde3161124d6ae37c506b3476aea9996d12e97/tlslite/utils/rsakey.py#L394-L425\r\nhas multiple ways in which it leaks information (for one, it aborts as soon as the plaintext doesn't start with 0x00, 0x02) about the decrypted ciphertext (both the bit length of the decrypted message as well as where the first unexpected byte lays).\r\n\r\nAll TLS servers that enable RSA key exchange as well as applications that use the RSA decryption API directly are vulnerable.\r\n\r\nAll previous versions of tlslite-ng are vulnerable.\r\n\r\n### Patches\r\nThe patches to fix it are proposed in \r\nhttps://github.com/tlsfuzzer/tlslite-ng/pull/438\r\nhttps://github.com/tlsfuzzer/tlslite-ng/pull/439\r\n\r\nNote: the patches depend on Python processing the individual bytes in side-channel free manner, this is known to not be the case: https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/\r\nAs such, users that require side-channel resistance are recommended to use different TLS implementations, as stated in the [security policy](https://github.com/tlsfuzzer/tlslite-ng/blob/master/SECURITY.md) of tlslite-ng.\r\n\r\n### Workarounds\r\nThere is no way to workaround this issue.\r\n\r\n### References\r\nhttps://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/\r\n\r\n### For more information\r\nIf you have any questions or comments about this advisory please open an issue in [tlslite-ng](https://github.com/tlsfuzzer/tlslite-ng/issues).", "latest_version": "0.7.6", "language": "python", "license": "LGPL-2.0-only", "repository_summary": "Pure python implementation of SSL and TLS.", "repo_url": "https://github.com/tlsfuzzer/tlslite-ng", "impact": {"cvss2_score": 5.0, "cvss2_severity": "MEDIUM", "av": "NETWORK", "ac": "LOW", "pr": "NONE", "c": "HIGH", "i": "NONE", "a": "NONE", "impact_score": 3.6, "exploitability_score": 3.9, "cvss3_score": 7.5, "cvss3_severity": "HIGH", "ui": "NONE", "s": "UNCHANGED"}, "ochrona_severity_score": 7.5}