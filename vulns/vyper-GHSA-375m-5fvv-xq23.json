{
    "name": "vyper",
    "cve_id": "GHSA-375m-5fvv-xq23",
    "publish_date": "2021-04-19T15:11:54Z",
    "cwe_id": "CWE-787",
    "owner": "Vyper Team",
    "affected_versions": [
        {
            "version_value": "0.2.9",
            "operator": "<"
        }
    ],
    "references": [
        "https://github.com/vyperlang/vyper/security/advisories/GHSA-375m-5fvv-xq23",
        "https://github.com/advisories/GHSA-375m-5fvv-xq23"
    ],
    "description": "## Background\n\n@tjayrush reported a data handling issue with certain Web3 libraries using Vyper-deploy forwarder proxy contracts using our Vyper's built-in `create_forwarder_to` function prior to our change to support EIP-1167 style forwarder proxies.\n\n### Impact\nIf you are an end user of a forwarder-style proxy deployed using Vyper's built-in `create_forwarder_to` function AND you have a function that returns >4096 bytes AND you do no return data sanitation on the value returned, you could potentially see a data corruption issue.\n\nOtherwise, if you are handling the result of a return call AND you expect a specific `RETURNDATASIZE` that is less than 4096 (such as `SafeERC20.safeTransfer`) then the call will fail that check.\n\n### Patches\nThe issue was patched when we upgraded to EIP-1167 style forwarder proxies in #2281.\n\n### Workarounds\nIf you are making a call to a contract method that is expected to return <= 4096 bytes, there is no issue as the ABI decoders in both Solidity and Vyper will truncate the data properly. Web3 libraries will also do this, unless you are doing `eth_call` or `eth_sendTransaction` directly.\n\nIf you are using a Solidity library that checks `RETURNDATASIZE` of an external call to a forwarder proxy deployed prior to this patch, it will fail on that assertion (such as `SafeERC20.safeTransfer`). The workaround is to always do a greater than or equal to check, rather than a strict equals to check.",
    "latest_version": "0.2.12",
    "language": "python",
    "license": "Apache-2.0",
    "repository_summary": "Vyper: the Pythonic Programming Language for the EVM",
    "repo_url": "https://github.com/vyperlang/vyper",
    "impact": {
        "cvss3_score": 4.8,
        "cvss3_severity": "MEDIUM",
        "av": "NETWORK",
        "ac": "HIGH",
        "pr": "NONE",
        "ui": "NONE",
        "s": "UNCHANGED",
        "c": "NONE",
        "i": "LOW",
        "a": "LOW",
        "impact_score": 2.5,
        "exploitability_score": 2.2,
        "vector_string": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L"
    },
    "ochrona_severity_score": 4.8
}